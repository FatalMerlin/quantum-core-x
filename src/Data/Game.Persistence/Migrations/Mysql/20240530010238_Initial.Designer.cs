// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuantumCore.Game.Persistence;

#nullable disable

namespace QuantumCore.Game.Persistence.Migrations.Mysql
{
    [DbContext(typeof(MySqlGameDbContext))]
    [Migration("20240530010238_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.DeletedPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Dx")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<byte>("Gold")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("HairPart")
                        .HasColumnType("int");

                    b.Property<long>("Health")
                        .HasColumnType("bigint");

                    b.Property<byte>("Ht")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Iq")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Mana")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<byte>("PlayerClass")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<byte>("SkillGroup")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("St")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Stamina")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.HasKey("Id");

                    b.ToTable("DeletedPlayers");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("Count")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.Property<uint>("ItemId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("PlayerId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Position")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.Property<byte>("Window")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PermissionGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45bff707-1836-42b7-956d-00b9b69e0ee0"),
                            Name = "Operator"
                        });
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermUser", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("PlayerId")
                        .HasColumnType("int unsigned");

                    b.HasKey("GroupId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PermissionUsers");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("45bff707-1836-42b7-956d-00b9b69e0ee0"),
                            PlayerId = 1u
                        });
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.Player", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<uint>("AvailableSkillPoints")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AvailableStatusPoints")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("BodyPart")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.Property<byte>("Dx")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Empire")
                        .HasColumnType("tinyint unsigned");

                    b.Property<uint>("Experience")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("GivenStatusPoints")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Gold")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("HairPart")
                        .HasColumnType("int unsigned");

                    b.Property<long>("Health")
                        .HasColumnType("bigint");

                    b.Property<byte>("Ht")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Iq")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Mana")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<ulong>("PlayTime")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("PlayerClass")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<byte>("SkillGroup")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("St")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("Stamina")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            AccountId = new Guid("e34fd5ab-fb3b-428e-935b-7db5bd08a3e5"),
                            AvailableSkillPoints = 99u,
                            AvailableStatusPoints = 0u,
                            BodyPart = 0u,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Dx = (byte)99,
                            Empire = (byte)0,
                            Experience = 0u,
                            GivenStatusPoints = 0u,
                            Gold = 2000000000u,
                            HairPart = 0u,
                            Health = 99999L,
                            Ht = (byte)99,
                            Iq = (byte)99,
                            Level = (byte)99,
                            Mana = 99999L,
                            Name = "Admin",
                            PlayTime = 0ul,
                            PlayerClass = (byte)0,
                            PositionX = 958870,
                            PositionY = 272788,
                            SkillGroup = (byte)0,
                            St = (byte)99,
                            Stamina = 0L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PlayerSkill", b =>
                {
                    b.Property<uint>("PlayerId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SkillId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("MasterType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("NextReadTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(CAST(CURRENT_TIMESTAMP AS DATETIME(6)))");

                    b.HasKey("PlayerId", "SkillId");

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.SkillProto", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("AffectFlags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AffectFlags2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AttackGradePoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CooldownPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DurationPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DurationPoly2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DurationPoly3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DurationSPCostPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GrandMasterAddSPCostPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("LevelLimit")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelStep")
                        .HasColumnType("smallint");

                    b.Property<string>("MasterBonusPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("MaxHit")
                        .HasColumnType("smallint");

                    b.Property<short>("MaxLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("PointOn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PointOn2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PointOn3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PointPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PointPoly2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PointPoly3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PrerequisiteSkillLevel")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisiteSkillVnum")
                        .HasColumnType("int");

                    b.Property<string>("SPCostPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SkillType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SplashAroundDamageAdjustPoly")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<uint>("SplashRange")
                        .HasColumnType("int unsigned");

                    b.Property<int>("TargetRange")
                        .HasColumnType("int");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("SkillProtos");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            AffectFlags = "Ymir",
                            AffectFlags2 = "Ymir",
                            AttackGradePoly = "",
                            CooldownPoly = "12",
                            DurationPoly = "",
                            DurationPoly2 = "",
                            DurationPoly3 = "",
                            DurationSPCostPoly = "",
                            Flags = "Attack,UseMeleeDamage",
                            GrandMasterAddSPCostPoly = "40+100*k",
                            LevelLimit = (short)0,
                            LevelStep = (short)1,
                            MasterBonusPoly = "-( 1.1*atk + (0.5*atk +  1.5 * str)*k)",
                            MaxHit = (short)5,
                            MaxLevel = (short)1,
                            Name = "»ï¿¬Âü",
                            PointOn = "HP",
                            PointOn2 = "None",
                            PointOn3 = "",
                            PointPoly = "-( 1.1*atk + (0.5*atk +  1.5 * str)*k)",
                            PointPoly2 = "",
                            PointPoly3 = "",
                            PrerequisiteSkillLevel = 0,
                            PrerequisiteSkillVnum = 0,
                            SPCostPoly = "40+100*k",
                            SkillType = "Melee",
                            SplashAroundDamageAdjustPoly = "1",
                            SplashRange = 0u,
                            TargetRange = 0,
                            Type = (short)1
                        },
                        new
                        {
                            Id = 2u,
                            AffectFlags = "Ymir",
                            AffectFlags2 = "Ymir",
                            AttackGradePoly = "",
                            CooldownPoly = "15",
                            DurationPoly = "",
                            DurationPoly2 = "",
                            DurationPoly3 = "",
                            DurationSPCostPoly = "",
                            Flags = "Attack,UseMeleeDamage",
                            GrandMasterAddSPCostPoly = "50+130*k",
                            LevelLimit = (short)0,
                            LevelStep = (short)1,
                            MasterBonusPoly = "-(3*atk + (0.8*atk + str*5 + dex*3 +con)*k)",
                            MaxHit = (short)12,
                            MaxLevel = (short)1,
                            Name = "ÆÈ¹æÇ³¿ì",
                            PointOn = "HP",
                            PointOn2 = "None",
                            PointOn3 = "",
                            PointPoly = "-(3*atk + (0.8*atk + str*5 + dex*3 +con)*k)",
                            PointPoly2 = "",
                            PointPoly3 = "",
                            PrerequisiteSkillLevel = 0,
                            PrerequisiteSkillVnum = 0,
                            SPCostPoly = "50+130*k",
                            SkillType = "Melee",
                            SplashAroundDamageAdjustPoly = "1",
                            SplashRange = 200u,
                            TargetRange = 0,
                            Type = (short)1
                        },
                        new
                        {
                            Id = 3u,
                            AffectFlags = "Jeongwihon",
                            AffectFlags2 = "Ymir",
                            AttackGradePoly = "",
                            CooldownPoly = "63+10*k",
                            DurationPoly = "60+90*k",
                            DurationPoly2 = "60+90*k",
                            DurationPoly3 = "",
                            DurationSPCostPoly = "",
                            Flags = "SelfOnly",
                            GrandMasterAddSPCostPoly = "50+140*k",
                            LevelLimit = (short)0,
                            LevelStep = (short)1,
                            MasterBonusPoly = "50*k",
                            MaxHit = (short)1,
                            MaxLevel = (short)1,
                            Name = "Àü±ÍÈ¥",
                            PointOn = "ATT_SPEED",
                            PointOn2 = "MOV_SPEED",
                            PointOn3 = "",
                            PointPoly = "50*k",
                            PointPoly2 = "20*k",
                            PointPoly3 = "",
                            PrerequisiteSkillLevel = 0,
                            PrerequisiteSkillVnum = 0,
                            SPCostPoly = "50+140*k",
                            SkillType = "Normal",
                            SplashAroundDamageAdjustPoly = "1",
                            SplashRange = 0u,
                            TargetRange = 0,
                            Type = (short)1
                        },
                        new
                        {
                            Id = 4u,
                            AffectFlags = "Geomgyeong",
                            AffectFlags2 = "Ymir",
                            AttackGradePoly = "",
                            CooldownPoly = "30+10*k",
                            DurationPoly = "30+50*k",
                            DurationPoly2 = "",
                            DurationPoly3 = "",
                            DurationSPCostPoly = "",
                            Flags = "SelfOnly",
                            GrandMasterAddSPCostPoly = "100+200*k",
                            LevelLimit = (short)0,
                            LevelStep = (short)1,
                            MasterBonusPoly = "(100 + str + lv * 3)*k",
                            MaxHit = (short)1,
                            MaxLevel = (short)1,
                            Name = "°Ë°æ",
                            PointOn = "ATT_GRADE",
                            PointOn2 = "NONE",
                            PointOn3 = "",
                            PointPoly = "(100 + str + lv * 3)*k",
                            PointPoly2 = "",
                            PointPoly3 = "",
                            PrerequisiteSkillLevel = 0,
                            PrerequisiteSkillVnum = 0,
                            SPCostPoly = "100+200*k",
                            SkillType = "Normal",
                            SplashAroundDamageAdjustPoly = "1",
                            SplashRange = 0u,
                            TargetRange = 0,
                            Type = (short)1
                        },
                        new
                        {
                            Id = 5u,
                            AffectFlags = "Ymir",
                            AffectFlags2 = "Ymir",
                            AttackGradePoly = "",
                            CooldownPoly = "12",
                            DurationPoly = "",
                            DurationPoly2 = "3",
                            DurationPoly3 = "",
                            DurationSPCostPoly = "",
                            Flags = "Attack,UseMeleeDamage,Splash,Crush",
                            GrandMasterAddSPCostPoly = "60+120*k",
                            LevelLimit = (short)0,
                            LevelStep = (short)1,
                            MasterBonusPoly = "-(2*atk + (atk + dex*3 + str*7 + con)*k)",
                            MaxHit = (short)4,
                            MaxLevel = (short)1,
                            Name = "ÅºÈ¯°Ý",
                            PointOn = "HP",
                            PointOn2 = "MOV_SPEED",
                            PointOn3 = "",
                            PointPoly = "-(2*atk + (atk + dex*3 + str*7 + con)*k)",
                            PointPoly2 = "150",
                            PointPoly3 = "",
                            PrerequisiteSkillLevel = 0,
                            PrerequisiteSkillVnum = 0,
                            SPCostPoly = "60+120*k",
                            SkillType = "Melee",
                            SplashAroundDamageAdjustPoly = "1",
                            SplashRange = 200u,
                            TargetRange = 0,
                            Type = (short)1
                        });
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.Item", b =>
                {
                    b.HasOne("QuantumCore.Game.Persistence.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermAuth", b =>
                {
                    b.HasOne("QuantumCore.Game.Persistence.Entities.PermGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermUser", b =>
                {
                    b.HasOne("QuantumCore.Game.Persistence.Entities.PermGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuantumCore.Game.Persistence.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("QuantumCore.Game.Persistence.Entities.PermGroup", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
